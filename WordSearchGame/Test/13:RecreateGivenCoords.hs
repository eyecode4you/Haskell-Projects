-- Sample coord grid, x = row y = column
-- output grid
og :: Show a => [a] -> IO ()
og = putStrLn . unlines . map show

coords = [ [(0,0), (0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7)]
         , [(1,0), (1,1), (1,2), (1,3), (1,4), (1,5), (1,6), (1,7)]
         , [(2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2,6), (2,7)]
         , [(3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3,6), (3,7)]
         , [(4,0), (4,1), (4,2), (4,3), (4,4), (4,5), (4,6), (4,7)]
         , [(5,0), (5,1), (5,2), (5,3), (5,4), (5,5), (5,6), (5,7)]
         , [(6,0), (6,1), (6,2), (6,3), (6,4), (6,5), (6,6), (6,7)]
         , [(7,0), (7,1), (7,2), (7,3), (7,4), (7,5), (7,6), (7,7)]
         ]

{- TESTING:
  coords2 = do
    row <- [0..7]
    col <- [0..7]
    return (row, col)
returns: [(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7),(1,0),(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7),(2,0),(2,1),(2,2),(2,3),(2,4),(2,5),(2,6),(2,7),
(3,0),(3,1),(3,2),(3,3),(3,4),(3,5),(3,6),(3,7),(4,0),(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7),(5,0),(5,1),(5,2),(5,3),(5,4),(5,5),(5,6),(5,7),
(6,0),(6,1),(6,2),(6,3),(6,4),(6,5),(6,6),(6,7),(7,0),(7,1),(7,2),(7,3),(7,4),(7,5),(7,6),(7,7)] -- A single list

same as: [ (row, col) | col <- [0..7], row <- [0..7] ]
-}

{-
coords2 = do
  row <- [0..7]
  return $ do
    col <- [0..7]
    return (row, col)
    
returns: [[(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7)],[(1,0),(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7)],
[(2,0),(2,1),(2,2),(2,3),(2,4),(2,5),(2,6),(2,7)],[(3,0),(3,1),(3,2),(3,3),(3,4),(3,5),(3,6),(3,7)],
[(4,0),(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7)],[(5,0),(5,1),(5,2),(5,3),(5,4),(5,5),(5,6),(5,7)],
[(6,0),(6,1),(6,2),(6,3),(6,4),(6,5),(6,6),(6,7)],[(7,0),(7,1),(7,2),(7,3),(7,4),(7,5),(7,6),(7,7)]] -- A list of lists

Same as: [ [ (row, col) | col <- [0..7] ] | row <- [0..7] ]
-}

-- building coord grid with list comprehension
coords2 = [ [ (row, col) | col <- [0..7] ] | row <- [0..7] ]

-- building coord grid with
repeat8 = take 8 . repeat
cols8 = repeat8 [0..7]
rows8 = map repeat8 [0..7]

{-
rows8 =
[0,0,0,0,0,0,0,0]
[1,1,1,1,1,1,1,1]
[2,2,2,2,2,2,2,2]
[3,3,3,3,3,3,3,3]
[4,4,4,4,4,4,4,4]
[5,5,5,5,5,5,5,5]
[6,6,6,6,6,6,6,6]
[7,7,7,7,7,7,7,7]

cols8 =
[0,1,2,3,4,5,6,7]
[0,1,2,3,4,5,6,7]
[0,1,2,3,4,5,6,7]
[0,1,2,3,4,5,6,7]
[0,1,2,3,4,5,6,7]
[0,1,2,3,4,5,6,7]
[0,1,2,3,4,5,6,7]
[0,1,2,3,4,5,6,7]

e.g. what we want for each row is zip [0,0,0,0,0,0,0,0] [0,1,2,3,4,5,6,7] = [(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7)]

However, zip rows8 cols8 =
([0,0,0,0,0,0,0,0],[0,1,2,3,4,5,6,7])
([1,1,1,1,1,1,1,1],[0,1,2,3,4,5,6,7])
([2,2,2,2,2,2,2,2],[0,1,2,3,4,5,6,7])
([3,3,3,3,3,3,3,3],[0,1,2,3,4,5,6,7])
([4,4,4,4,4,4,4,4],[0,1,2,3,4,5,6,7])
([5,5,5,5,5,5,5,5],[0,1,2,3,4,5,6,7])
([6,6,6,6,6,6,6,6],[0,1,2,3,4,5,6,7])
([7,7,7,7,7,7,7,7],[0,1,2,3,4,5,6,7])

(,) operator tuplifies TWO elements: (,) 1 2 = (1,2)
zipWith (,) [0,0,0,0,0,0,0,0] [0,1,2,3,4,5,6,7] = [(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7)]
zipWith zip rows8 cols8 =
[(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7)]
[(1,0),(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7)]
[(2,0),(2,1),(2,2),(2,3),(2,4),(2,5),(2,6),(2,7)]
[(3,0),(3,1),(3,2),(3,3),(3,4),(3,5),(3,6),(3,7)]
[(4,0),(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7)]
[(5,0),(5,1),(5,2),(5,3),(5,4),(5,5),(5,6),(5,7)]
[(6,0),(6,1),(6,2),(6,3),(6,4),(6,5),(6,6),(6,7)]
[(7,0),(7,1),(7,2),(7,3),(7,4),(7,5),(7,6),(7,7)]
-}

zipOverGrid = zipWith zip
grid8 = zipOverGrid rows8 cols8

main :: IO ()
main = do
  og coords2
  {- matches the structure of our hardcoded grid:
  [(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7)]
  [(1,0),(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7)]
  [(2,0),(2,1),(2,2),(2,3),(2,4),(2,5),(2,6),(2,7)]
  [(3,0),(3,1),(3,2),(3,3),(3,4),(3,5),(3,6),(3,7)]
  [(4,0),(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7)]
  [(5,0),(5,1),(5,2),(5,3),(5,4),(5,5),(5,6),(5,7)]
  [(6,0),(6,1),(6,2),(6,3),(6,4),(6,5),(6,6),(6,7)]
  [(7,0),(7,1),(7,2),(7,3),(7,4),(7,5),(7,6),(7,7)]
  -}

  og grid8
  {- matches the structure of our hardcoded grid:
  [(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7)]
  [(1,0),(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7)]
  [(2,0),(2,1),(2,2),(2,3),(2,4),(2,5),(2,6),(2,7)]
  [(3,0),(3,1),(3,2),(3,3),(3,4),(3,5),(3,6),(3,7)]
  [(4,0),(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7)]
  [(5,0),(5,1),(5,2),(5,3),(5,4),(5,5),(5,6),(5,7)]
  [(6,0),(6,1),(6,2),(6,3),(6,4),(6,5),(6,6),(6,7)]
  [(7,0),(7,1),(7,2),(7,3),(7,4),(7,5),(7,6),(7,7)]
  -}

  {- misc. tests
  print (map (take 7 . repeat) [1..10]) -- [[1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3,3],[4,4,4,4,4,4,4,4,4,4],[5,5,5,5,5,5,5,5,5,5],[6,6,6,6,6,6,6,6,6,6],[7,7,7,7,7,7,7,7,7,7]]
  print (zip [1..10] ['a'..'j']) -- [(1,'a'),(2,'b'),(3,'c'),(4,'d'),(5,'e'),(6,'f'),(7,'g'),(8,'h'),(9,'i'),(10,'j')]
  -}
